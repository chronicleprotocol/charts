# Default values for gofer.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

logLevel: "debug"
logFormat: "text"
# -- can be `run`, `models`, `data`, or `proxy`
goferMode: "run"

extraArgs: []
  # -- extra args to pass to the gofer binary, uses .Values.goferMode as the first arg
  # eg: - could be used to use a custom config file
  # - "-c"
  # - "ipfs://Qm......."


# -- Note: If you want to override the default command and args, use `argsOverride` and `entryPointOverride`.
argsOverride: []
  # eg: - could be used to use a custom config file
  # - "foo"
  # - "-c"
  # - "ipfs://Qm......."

entryPointOverride: []

# -- Environment variable listing
env:
  # -- un-encrypted env vars passed to the pod
  normal: {}
    # GOLOG_LOG_LEVEL: pubsub=debug
    # FOO: bar
  raw: {}
    # - name: FOO
    #   valueFrom:
    #     secretKeyRef:
    #       name: foo-secret
    #       key: foo-key

image:
  repository: ghcr.io/chronicleprotocol/gofer
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  ports:
    gofer:
      port: 8080
    prometheus:
      port: 9090
    healthcheck:
      port: 9100

ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

# @default -- See `values.yaml`
livenessProbe: {}
  # tcpSocket:
  #   port: gofer
  # initialDelaySeconds: 60
  # periodSeconds: 120
  # -- for proxy mode:
  # httpGet:
  #   path: /healthz
  #   port: gofer
  # initialDelaySeconds: 60
  # periodSeconds: 120

# @default -- See `values.yaml`
readinessProbe: {}
  # tcpSocket:
  #   port: gofer
  # initialDelaySeconds: 10
  # periodSeconds: 10
  # -- for proxy mode:
  # httpGet:
  #   path: /healthz
  #   port: gofer
  # initialDelaySeconds: 60
  # periodSeconds: 60

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}

# This is a config file for gofer. it can override the default config if supplied
# It is in HCL format.
# For more information on HCL, see https://github.com/chronicleprotocol/oracle-suite/blob/master/config.hcl
configHcl: {}


serviceMonitor:
  # -- If true, a ServiceMonitor CRD is created for a prometheus operator
  # https://github.com/coreos/prometheus-operator
  enabled: false
  # -- port to scrape
  port: prometheus
  # -- Path to scrape
  path: /metrics
  # -- Alternative namespace for ServiceMonitor
  namespace: null
  # -- Additional ServiceMonitor labels
  labels: {}
  # -- Additional ServiceMonitor annotations
  annotations: {}
  # -- ServiceMonitor scrape interval
  interval: 30s
  # -- ServiceMonitor scheme
  scheme: http
  # -- ServiceMonitor TLS configuration
  tlsConfig: {}
  # -- ServiceMonitor scrape timeout
  scrapeTimeout: 30s
  # -- ServiceMonitor relabelings
  relabelings: []

# -- Extra K8s manifests to deploy
extraObjects: []
  # - apiVersion: "kubernetes-client.io/v1"
  #   kind: ExternalSecret
  #   metadata:
  #     name: some-secrets
  #   spec:
  #     backendType: someBackend
  #     data:
  #       - key: some-creds
  #         name: client_secret
