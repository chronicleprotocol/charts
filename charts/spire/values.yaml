# Default values for spire.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: ghcr.io/chronicleprotocol/spire
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

imagePullSecrets: []
nameOverride: ""
fullnameOverride: "spire"

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  ports:
    libp2p:
      port: 8000
      protocol: TCP
    webapi:
      port: 8080
      protocol: TCP
    rpc:
      port: 9100
      protocol: TCP

ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}

logLevel: "debug"

keystore:
  enabled: false
  keyStoreFile: |-
    {"address":"a23184c1ac6f51c4b1b462c108e4652dc9b4f5a6","id":"073dd01b-1b87-46b4-b52f-ca243bcf4b7b","version":3,"Crypto":{"cipher":"aes-128-ctr","cipherparams":{"iv":"8491d0eb057afca54a339c25163a6928"},"ciphertext":"006b10186ff3f4b9b1638ad176a83cd02eb8b6d687e651bad2e38fb91060e68d","kdf":"scrypt","kdfparams":{"salt":"1010801fe1140932f9a078010236292a481dc065b5bacb1aca8d7178d164340f","n":131072,"dklen":32,"p":1,"r":8},"mac":"d91389bec6bcded7d67fd587b8c08a1136612eda15de88bf881d61ad46827674"},"crypto":{"cipher":"aes-128-ctr","cipherparams":{"iv":"8491d0eb057afca54a339c25163a6928"},"ciphertext":"006b10186ff3f4b9b1638ad176a83cd02eb8b6d687e651bad2e38fb91060e68d","kdf":"scrypt","kdfparams":{"salt":"1010801fe1140932f9a078010236292a481dc065b5bacb1aca8d7178d164340f","n":131072,"dklen":32,"p":1,"r":8},"mac":"d91389bec6bcded7d67fd587b8c08a1136612eda15de88bf881d61ad46827674"}}
  password: "ilikeapples"
  ethFromAddress: "0xA23184c1Ac6F51c4b1b462c108E4652Dc9B4f5A6"

# Environment variable listing
env:
  # non sensitive variables
  # refer to https://github.com/chronicleprotocol/oracle-suite/tree/master/cmd/spire#environment-variables
  normal:
    CFG_WEBAPI_LISTEN_ADDR: "0.0.0.0:8080"
    CFG_WEBAPI_ETH_ADDR_BOOK: "0xd51Fd30C873356b432F766eB55fc599586734a95"

# This is a config file for spire. it can override the default config if supplied
# It is in HCL format.
# For more information on HCL, see https://github.com/chronicleprotocol/oracle-suite/blob/master/config.hcl
configHcl: |
  variables {
    # List of feeds that are allowed to send price updates and event attestations.
    feeds = try(env.CFG_FEEDS == "" ? [] : split(",", env.CFG_FEEDS), [
      "0xDA1d2961Da837891f43235FddF66BAD26f41368b",
      "0x4b0E327C08e23dD08cb87Ec994915a5375619aa2",
      "0x75ef8432566A79C86BBF207A47df3963B8Cf0753",
      "0x83e23C207a67a9f9cB680ce84869B91473403e7d",
      "0xFbaF3a7eB4Ec2962bd1847687E56aAEE855F5D00",
      "0xfeEd00AA3F0845AFE52Df9ECFE372549B74C69D2",
      "0x71eCFF5261bAA115dcB1D9335c88678324b8A987",
      "0x8ff6a38A1CD6a42cAac45F08eB0c802253f68dfD",
      "0x16655369Eb59F3e1cAFBCfAC6D3Dd4001328f747",
      "0xD09506dAC64aaA718b45346a032F934602e29cca",
      "0xc00584B271F378A0169dd9e5b165c0945B4fE498",
      "0x60da93D9903cb7d3eD450D4F81D402f7C4F71dd9",
      "0xa580BBCB1Cee2BCec4De2Ea870D20a12A964819e",
      "0xD27Fa2361bC2CfB9A591fb289244C538E190684B",
      "0x8de9c5F1AC1D4d02bbfC25fD178f5DAA4D5B26dC",
      "0xE6367a7Da2b20ecB94A25Ef06F3b551baB2682e6",
      "0xA8EB82456ed9bAE55841529888cDE9152468635A",
      "0x130431b4560Cd1d74A990AE86C337a33171FF3c6",
      "0x8aFBD9c3D794eD8DF903b3468f4c4Ea85be953FB",
      "0xd94BBe83b4a68940839cD151478852d16B3eF891",
      "0xC9508E9E3Ccf319F5333A5B8c825418ABeC688BA",
      "0x77EB6CF8d732fe4D92c427fCdd83142DB3B742f7",
      "0x3CB645a8f10Fb7B0721eaBaE958F77a878441Cb9",
      "0x4f95d9B4D842B2E2B1d1AC3f2Cf548B93Fd77c67",
      "0xaC8519b3495d8A3E3E44c041521cF7aC3f8F63B3",
      "0xd72BA9402E9f3Ff01959D6c841DDD13615FFff42"
    ])
  }

  ethereum {
    rand_keys = try(env.CFG_ETH_FROM, "") == "" ? ["default"] : []

    dynamic "key" {
      for_each = try(env.CFG_ETH_FROM, "") == "" ? [] : [1]
      labels   = ["default"]
      content {
        address         = try(env.CFG_ETH_FROM, "")
        keystore_path   = try(env.CFG_ETH_KEYS, "")
        passphrase_file = try(env.CFG_ETH_PASS, "")
      }
    }

    client "default" {
      rpc_urls     = try(env.CFG_ETH_RPC_URLS == "" ? [] : split(",", env.CFG_ETH_RPC_URLS), [
        "https://eth.public-rpc.com"
      ])
      chain_id     = tonumber(try(env.CFG_ETH_CHAIN_ID, "1"))
      ethereum_key = "default"
    }

    client "arbitrum" {
      rpc_urls     = try(env.CFG_ETH_ARB_RPC_URLS == "" ? [] : split(",", env.CFG_ETH_ARB_RPC_URLS), [
        "https://arbitrum.public-rpc.com"
      ])
      chain_id     = tonumber(try(env.CFG_ETH_ARB_CHAIN_ID, "42161"))
      ethereum_key = "default"
    }

    client "optimism" {
      rpc_urls     = try(env.CFG_ETH_OPT_RPC_URLS == "" ? [] : split(",", env.CFG_ETH_OPT_RPC_URLS), [
        "https://mainnet.optimism.io"
      ])
      chain_id     = tonumber(try(env.CFG_ETH_OPT_CHAIN_ID, "10"))
      ethereum_key = "default"
    }
  }

  transport {
    # LibP2P transport configuration. Always enabled.
    libp2p {
      feeds           = var.feeds
      priv_key_seed   = try(env.CFG_LIBP2P_PK_SEED, "")
      listen_addrs    = try(split(",", env.CFG_LIBP2P_LISTEN_ADDRS), ["/ip4/0.0.0.0/tcp/8000"])
      bootstrap_addrs = try(env.CFG_LIBP2P_BOOTSTRAP_ADDRS == "" ? [] : split(",", env.CFG_LIBP2P_BOOTSTRAP_ADDRS), [
        "/dns/spire-bootstrap1.makerops.services/tcp/8000/p2p/12D3KooWRfYU5FaY9SmJcRD5Ku7c1XMBRqV6oM4nsnGQ1QRakSJi",
        "/dns/spire-bootstrap2.makerops.services/tcp/8000/p2p/12D3KooWBGqjW4LuHUoYZUhbWW1PnDVRUvUEpc4qgWE3Yg9z1MoR"
      ])
      direct_peers_addrs = try(env.CFG_LIBP2P_DIRECT_PEERS_ADDRS == "" ? [] : split(",", env.CFG_LIBP2P_DIRECT_PEERS_ADDRS), [])
      blocked_addrs      = try(env.CFG_LIBP2P_BLOCKED_ADDRS == "" ? [] : split(",", env.CFG_LIBP2P_BLOCKED_ADDRS), [])
      disable_discovery  = tobool(try(env.CFG_LIBP2P_DISABLE_DISCOVERY, false))
      ethereum_key       = try(env.CFG_ETH_FROM, "") == "" ? "" : "default"
    }

    # WebAPI transport configuration. Enabled if CFG_WEBAPI_LISTEN_ADDR is set to a listen address.
    dynamic "webapi" {
      for_each = try(env.CFG_WEBAPI_LISTEN_ADDR, "") == "" ? [] : [1]
      content {
        feeds             = var.feeds
        listen_addr       = try(env.CFG_WEBAPI_LISTEN_ADDR, "0.0.0.0.8080")
        socks5_proxy_addr = try(env.CFG_WEBAPI_SOCKS5_PROXY_ADDR, "127.0.0.1:9050")
        ethereum_key      = try(env.CFG_ETH_FROM, "") == "" ? "" : "default"

        # Ethereum based address book. Enabled if CFG_WEBAPI_ETH_ADDR_BOOK is set to a contract address.
        dynamic "ethereum_address_book" {
          for_each = try(env.CFG_WEBAPI_ETH_ADDR_BOOK, "") == "" ? [] : [1]
          content {
            contract_addr   = try(env.CFG_WEBAPI_ETH_ADDR_BOOK, "")
            ethereum_client = "default"
          }
        }

        # Static address book. Enabled if CFG_WEBAPI_STATIC_ADDR_BOOK is set to a comma separated list of addresses.
        dynamic "static_address_book" {
          for_each = try(env.CFG_WEBAPI_STATIC_ADDR_BOOK, "") == "" ? [] : [1]
          content {
            addresses = try(split(",", env.CFG_WEBAPI_STATIC_ADDR_BOOK), "")
          }
        }
      }
    }
  }

  spire {
    rpc_listen_addr = try(env.CFG_SPIRE_RPC_ADDR, "0.0.0.0:9100")
    rpc_agent_addr  = try(env.CFG_SPIRE_RPC_ADDR, "127.0.0.1:9100")

    # List of pairs that are collected by the spire node. Other pairs are ignored.
    pairs = try(env.CFG_SPIRE_PAIRS == "" ? [] : split(",", env.CFG_SPIRE_PAIRS), [
      "AAVEUSD",
      "AVAXUSD",
      "BALUSD",
      "BATUSD",
      "BTCUSD",
      "COMPUSD",
      "CRVUSD",
      "DOTUSD",
      "ETHBTC",
      "ETHUSD",
      "FILUSD",
      "GNOUSD",
      "IBTAUSD",
      "LINKUSD",
      "LRCUSD",
      "MANAUSD",
      "MKRETH",
      "MKRUSD",
      "PAXGUSD",
      "RETHUSD",
      "SNXUSD",
      "SOLUSD",
      "UNIUSD",
      "USDTUSD",
      "WNXMUSD",
      "XRPUSD",
      "XTZUSD",
      "YFIUSD",
      "ZECUSD",
      "ZRXUSD",
      "STETHUSD",
      "WSTETHUSD",
      "MATICUSD"
    ])
  }

tor-proxy:
  enabled: true
  env:
    normal:
      TOR_EXTRA_ARGS: |
        AutomapHostsOnResolve 1
        ControlSocketsGroupWritable 1
        CookieAuthentication 1
        CookieAuthFileGroupReadable 1
        DNSPort 5353
        ExitPolicy reject *:*
        Log notice stderr
        RunAsDaemon 0
        ControlSocket /home/tor/.tor/control_socket
        CookieAuthFile /home/tor/.tor/control_socket.authcookie
        DataDirectory /home/tor/.tor
        HiddenServiceDir /var/lib/tor/hidden_services
        HiddenServicePort 8888 spire:8080
        HiddenServiceVersion 3
