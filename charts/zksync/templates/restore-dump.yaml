{{- if .Values.restoreDump.enabled }}
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  annotations:
    {{- toYaml .Values.restoreDump.storage.annotations | nindent 4 }}
  finalizers:
  - kubernetes.io/pvc-protection
  labels:
    app.kubernetes.io/instance: zksync-testnet
    app.kubernetes.io/name: zksync
  name: dump-storage
spec:
  accessModes:
    {{- toYaml .Values.restoreDump.storage.accessModes | nindent 4 }}
  resources:
    requests:
      storage: {{ .Values.restoreDump.storage.size | quote }}
  storageClassName: {{ .Values.restoreDump.storage.storageClassName }}

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-restore-dump
  labels:
    {{- include "zksync.labels" . | nindent 4 }}
  annotations:
    "helm.sh/hook": post-install
data:
  restore-dump.sh: |
    #!/usr/bin/env bash
    set -e

    if psql -U $POSTGRES_USER -d postgres -lqt | cut -d \| -f 1 | grep -qw "{{ .Values.restoreDump.databaseName }}"; then
        echo "Database already exists"
    else
        echo "Database does not exist"
        pg_restore --exit-on-error -j $(nproc --all) -d postgres -U $POSTGRES_USER --no-owner --no-privileges --disable-triggers --create /pg_backups/external_node_latest.pgdump
    fi

---
apiVersion: batch/v1
kind: Job
metadata:
  name: "{{ .Release.Name }}-restore-dump"
  labels:
    {{- include "zksync.labels" . | nindent 4 }}
  annotations:
    "helm.sh/hook": post-install
    # "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
spec:
  template:
    metadata:
      name: "{{ .Release.Name }}-restore-dump"
      labels:
        {{- include "zksync.labels" . | nindent 8 }}
    spec:
      restartPolicy: Never
      {{- with .Values.restoreDump.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: restore-dump
          securityContext:
            {{- toYaml .Values.restoreDump.securityContext | nindent 12 }}
          image: "{{ .Values.restoreDump.image.repository }}:{{ .Values.restoreDump.image.tag }}"
          imagePullPolicy: {{ .Values.restoreDump.image.pullPolicy }}
          command: ["/bin/sh", "-c"]
          args:
            - >
              set -euxo pipefail;
              cd /pg-backups;
              echo "Downloading snapshot tarball...";
              wget -O {{ .Values.restoreDump.fileName }} {{ .Values.restoreDump.snapShotUrl }};
              echo "Restoring database dump...";
              /restore-dump.sh
              echo "Deleting tarball archive..." &&
              rm -f {{ .Values.restoreDump.fileName }};
              echo "Database dump download and restore complete.";
          resources:
            {{- toYaml .Values.restoreDump.resources | nindent 12 }}
          env:
            - name: POSTGRES_USER
              value: {{ .Values.restoreDump.user }}
          volumeMounts:
            - name: restore-dump
              mountPath: "/"
              readOnly: true
            - name: dump-storage
              mountPath: /pg-backups
      volumes:
        - name: restore-dump
          configMap:
            name: postgres-restore-dump
        - name: dump-storage
          persistentVolumeClaim:
            claimName: dump-storage
{{- end }}