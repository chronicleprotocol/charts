apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "validator.fullname" . }}-scripts
  labels:
    app: {{ include "validator.name" . }}
data:
  get-ips.sh: |
    #!/bin/bash

    # Set the namespace and service name
    NAMESPACE="{{ .Release.Namespace }}"
    SERVICE_NAME="{{ include "validator.fullname" . }}"

    {{- if eq .Values.ghost.service.type "NodePort" }}
    # Get the NodePort of the service
    NODE_PORT=$(kubectl get svc $SERVICE_NAME -n $NAMESPACE -o jsonpath='{.spec.ports[0].nodePort}')

    # Get POD name
    POD_NAME=$(kubectl get pods --namespace {{ .Release.Namespace }} -l "app.kubernetes.io/name={{ include "validator.fullname" . }},app.kubernetes.io/instance={{ .Release.Name }}" -o jsonpath="{.items[0].metadata.name}")

    # Get NODE that pod is scheduled on
    NODE_NAME=$(kubectl get pod $POD_NAME -n $NAMESPACE -o jsonpath='{.spec.nodeName}')

    #get the public IP
    PUBLIC_IP=$(kubectl get node $NODE_NAME  -o jsonpath='{.status.addresses[?(@.type=="ExternalIP")].address}')
    if [ -z "$PUBLIC_IP" ]; then
        PUBLIC_IP=$(kubectl get node $NODE_NAME  -o jsonpath='{.status.addresses[?(@.type=="InternalIP")].address}')
    fi

    {{- else }}
    echo "Attempt to get public IP for service type other: "
    get_public_ip() {
        PUBLIC_IP=$(dig +short -4 myip.opendns.com @resolver1.opendns.com)
        if [[ "$PUBLIC_IP" =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "$PUBLIC_IP"
            return
        fi
        PUBLIC_IP=$(curl -4s ifconfig.me)
        if [[ "$PUBLIC_IP" =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "$PUBLIC_IP"
            return
        fi
        PUBLIC_IP=$(curl -4s icanhazip.com)
        if [[ "$PUBLIC_IP" =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "$PUBLIC_IP"
            return
        fi
        if [[ -n "$PUBLIC_IP" && "$PUBLIC_IP" =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "$PUBLIC_IP"
            return
        fi
        echo -e "\e[31m[ERROR]: Unable to obtain public IP address!\e[0m"
        exit 1
    }
    export PUBLIC_IP=$(get_public_ip)
    {{- end }}
    echo " got the public IP: $PUBLIC_IP"
    echo " got the NODE_PORT: $NODE_PORT"
    echo "creating configmap to store PUBLIC_IP and NODE_PORT: ....."
    kubectl create configmap {{ include "validator.fullname" . }}-podinfo --from-literal=PUBLIC_IP=$PUBLIC_IP --from-literal=NODE_PORT=$NODE_PORT -n $NAMESPACE --dry-run=client -o yaml | kubectl apply -f -
    echo "configmap created successfully"
