# Default values for ghost.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# -- Values for Ghost
ghost:
  replicaCount: 1

  image:
    repository: ghcr.io/chronicleprotocol/ghost
    pullPolicy: Always
    # -- Overrides the image tag whose default is the chart appVersion.
    tag: "0.46.1@sha256:e69d8363d5a1f74d534fbae9c1d4f46909a69b9e192bb8153bb20942732911b7"

  # -- Log level for the validator, can be one of `debug`, `info`, `warning`, `error`
  logLevel: info
  # -- Log format for the validator, can be one of `json`, `text`
  logFormat: text

  # -- chain name for the "target" or "main" chain we use for the validator
  chainName: eth
  # -- RPC url for the "target" or "main" chain we use for the validator. Can be mainnet ethereum or sepolia ethereum
  rpcUrl: null
  # -- chain id for the "target" or "main" chain we use for the validator. Can be mainnet ethereum `1` or sepolia ethereum `11155111`
  chainId: '1'
  # -- chain tx type for the "target" or "main" chain we use for the validator. Can be mainnet ethereum `eip1559` or sepolia ethereum `legacy`
  chainTxType: null

  # -- RPC url where the validator sources data from. (default via protocol or BYO rpc here)
  # -- RPC URL for ETH
  ethRpcUrl: null
  # -- RPC url for ARB
  arbRpcUrl: null
  # -- RPC url for BNB
  bnbRpcUrl: null
  # -- RPC url for ETH Archival node
  ethArchRpcUrl: null
  # -- RPC url for GNO
  gnoRpcUrl: null
  # -- RPC url for MNT
  mntRpcUrl: null
  # -- RPC url for OETH (optimism)
  optRpcUrl: null
  # -- RPC url for Polygon (polygon)
  polRpcUrl: null

  # -- WATCHDOG onchain config address
  watchdogConfigReg: "0x94Fea534aef6df5cF66C2DAE5CE0A05d10C068F3"
  # -- WATCHDOG polling interval (in seconds)
  watchdogInterval: "900s"

  # -- libp2p buffer size
  libp2pSubscriptionBufferSize: '4096'
  # -- libp2p validate queue size
  libp2pValidateQueueSize: '4096'

  # -- command override for the validator
  commandOverride: []
    # eg:
    # - "/usr/local/bin/watchdog"
    # - "/usr/local/bin/chronicle-app"

  # -- args override for the validator
  argsOverride: []
    # eg:
    # - "run"
    # - "-c"
    # - "ipfs://Qm......."

  # -- WEB API (tor-proxy)
  webApi:
    # -- Enables the web api and deploys the tor-proxy subchart
    enabled: true
    # -- Listen address for the web api
    listenAddr: "0.0.0.0:8080"

  # -- Provide ETH keys from existing secrets : **NB** use only existing secret OR env vars, do not provide both
  ethConfig: {}
    # ethFrom:
    #   existingSecret: ""
    #   key: ""
    # ethKeys:
    #   existingSecret: ""
    #   key: ""
    # ethPass:
    #   existingSecret: ""
    #   key: ""

  # -- Environment variable listing
  env:
    # -- un-encrypted env vars passed to the pod
    normal: {}
      # GOLOG_LOG_LEVEL: pubsub=debug
      # FOO: bar

  imagePullSecrets: []
  nameOverride: ""
  # -- Override the release name to so tor-proxy can work with the default config. NB only change this if you know what you are doing
  fullnameOverride: "ghost"

  serviceAccount:
    # -- Specifies whether a service account should be created
    create: true
    # -- Annotations to add to the service account
    annotations: {}
    # --The name of the service account to use.
    # -- If not set and create is true, a name is generated using the fullname template
    name: ""

  # -- Pod annotations for the validator
  podAnnotations: {}

  # -- Pod security context for the validator
  podSecurityContext: {}
    # sysctls:
      # unsafe sysctls, need to be allowed at kubelet level
      # - name: net.core.rmem_max
      #   value: "4096"
      # - name: net.core.wmem_max
      #   value: "4096"
    # fsGroup: 2000

  # -- Security context for the validator
  securityContext: {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000

  # -- Service type for the validator
  service:
    # -- Type of service for the validator, can also be `LoadBalancer`, `NodePort` is experimental
    type: LoadBalancer

    ports:
      # -- libp2p port for the validator service
      libp2p:
        port: 8000
        protocol: TCP
      # -- webapi listen port for the validator service
      webapi:
        port: 8080
        protocol: TCP
      # to add more port-mappings, add them here:
      # https:
      #   port: 8443
      #   protocol: TCP

    # -- Annotations to add to the service
    annotations: {}
      # external-dns.alpha.kubernetes.io/hostname: DOMAIN_NAME

  # -- Ingress for the validator (Do not enable ingress, as libp2p does not support path based routing yet)
  ingress:
    # -- Disabled by default, since there is a bug in libp2p port assignment for dns based routing
    enabled: false
    className: ""
    annotations: {}
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"
    hosts:
      - host: chart-example.local
        paths:
          - path: /
            port: 8000
            pathType: ImplementationSpecific
          # - path: /webapi
          #   port: 8080
          #   pathType: ImplementationSpecific
          # - path: /metrics
          #   port: 9090
          #   pathType: ImplementationSpecific
    tls: []
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local

  # -- Liveness probe : restart the validator if the healthcheck endpoint is not reachable
  liveness:
    enabled: true
    livenessProbe:
      httpGet:
        path: /healthcheck
        port: 9100
      initialDelaySeconds: 30
      periodSeconds: 60

  # -- Readiness probe : stop the validator if the metrics endpoint is not reachable
  readiness:
    enabled: true
    readinessProbe:
      httpGet:
        path: /healthcheck
        port: 9100
      initialDelaySeconds: 30
      periodSeconds: 60

  # -- Resources constraints for the validator, CPU, Memory, etc.
  resources: {}
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi

  # -- Node selector for the validator
  nodeSelector: {}

  # -- Tolerations applied validator
  tolerations: []

  # -- pod Affinity spec applied validator
  affinity: {}

# -- Values for Tor Proxy (subchart of ghost)
tor-proxy:
  # -- values for tor-proxy, installs [tor-controller](/crds/tor-controller.yaml) and creates an [onionService CRD](/templates/tor-onion-service.yaml)
  enabled: true

metrics:
  enabled: true
  port: 9090
serviceMonitor:
  # -- If true, a ServiceMonitor CRD is created for a prometheus operator
  # https://github.com/coreos/prometheus-operator
  enabled: false
  # -- port to scrape
  port: metrics
  # -- Path to scrape
  path: /metrics
  # -- Alternative namespace for ServiceMonitor
  namespace: null
  # -- Additional ServiceMonitor labels
  labels: {}
  # -- Additional ServiceMonitor annotations
  annotations: {}
  # -- ServiceMonitor scrape interval
  interval: 60s
  # -- ServiceMonitor scheme
  scheme: http
  # -- ServiceMonitor TLS configuration
  tlsConfig: {}
  # -- ServiceMonitor scrape timeout
  scrapeTimeout: 60s
  # -- ServiceMonitor relabelings
  relabelings: []

# -- Extra K8s manifests to deploy
extraObjects: []
  # - apiVersion: "kubernetes-client.io/v1"
  #   kind: ExternalSecret
  #   metadata:
  #     name: some-secrets
  #   spec:
  #     backendType: someBackend
  #     data:
  #       - key: some-creds
  #         name: client_secret
