# Default values for erpc.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# -- Deployment replica count
replicaCount: 1

## OR
# -- Enable autoscaling / HPA
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

# -- default is 20 seconds
preStopSleepSeconds: null
# -- default RollingUpdate
updateStrategy: null
# -- default is 0
maxUnavailable: null
# -- default is 1
maxSurge: null

image:
  repository: ghcr.io/erpc/erpc
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}
  # configmap.reloader.stakater.com/reload: "erpc-config"
podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  annotations: {}
  labels: {}
  ports:
    http:
      port: 4000
      protocol: TCP
    metrics:
      port: 4001
      protocol: TCP

ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

# -- Liveness probe
# @default -- See `values.yaml`
livenessProbe:
  tcpSocket:
    port: http
  initialDelaySeconds: 60
  periodSeconds: 30

# -- Readiness probe
# @default -- See `values.yaml`
readinessProbe:
  tcpSocket:
    port: http
  initialDelaySeconds: 10
  periodSeconds: 10

nodeSelector: {}

tolerations: []

affinity: {}

redis:
  # -- If enabled a redis chart will be deployed as a dependency
  enabled: false
  auth:
    password: yourRedisSecret
  master:
    persistence:
      enabled: false
      size: 8Gi
  replica:
    replicaCount: 1
    persistence:
      enabled: false
      size: 8Gi

# -- create env vars from secrets, eg RPC provider API keys (eg, Blast API, DRPC, Infura, Alchemy, etc. )
env: {}
  # - name: DRPC_API_KEY
  #   valueFrom:
  #     secretKeyRef:
  #       name: rpc-api-keys
  #       key: drpc-api
  # - name: BLAST_API_KEY
  #   valueFrom:
  #     secretKeyRef:
  #       name: rpc-api-keys
  #       key: blast-api
  # - name: INFURA_API_KEY
  #   valueFrom:
  #     secretKeyRef:
  #       name: infura-api-key
  #       key: INFURA_API_KEY

erpc:
  # -- Log level for eRPC. Must be one of `debug`, `info`, `warn`, `error`, `fatal`, or `panic`.
  logLevel: info
  # -- provides a DB backend for caching. must be one of `memory`, `redis`, or `postgresql`. ref: https://docs.erpc.cloud/config/database
  cacheConfig:
    driver: memory
    # driver: redis
    # redis:
    #   addr: erpc-k8s-redis-headless:6379
    #   password: yourRedisSecret
    #   db: 0
    # driver: postgresql
    # postgresql:
    #   connectionUri: >-
    #     postgres://YOUR_USERNAME_HERE:YOUR_PASSWORD_HERE@your.postgres.hostname.here.com:5432/your_database_name
    #   table: rpc_cache


  # -- Projects define the networks and chains that eRPC will proxy for. ref: https://docs.erpc.cloud/config/projects
  projects:
    # -- each project must have a unique id, and is used in the URL structure: fqdn/{project_id}/{network-architecture}/{chain-id}
    - id: testnet
      # -- A network represents a chain in EVM, and it is a local grouping for upstreams. ref: https://docs.erpc.cloud/config/projects/networks
      networkIds:
      - '1'  # -- Eth mainnet
      - '11155111'  # -- Sepolia
      # todo: apply network level configuration per networkId

      # -- Apply auth to project level. ref: https://docs.erpc.cloud/config/auth
      authStrategies: {}
        # - type: secret
        #   rateLimitBudget: freemium
        #   secret:
        #     value: "some-random-secret-value"
        # - type: secret
        #   rateLimitBudget: premium
        #   secret:
        #     value: "some-random-secret2-value"
      failsafe:
        # -- Delay means how long to wait before starting a simultaneous hedged request.
        hedge:
          # -- e.g. if upstream A did not respond within 500ms, a new request towards upstream B will be started, and whichever responds faster will be returned to the client.
          delay: 500ms
          # -- In total how many hedges to start. e.g. if maxCount is 2, and upstream A did not respond within 500ms, a new request towards upstream B will be started. If B also did not respond, a new request towards upstream C will be started.
          maxCount: 2
        circuitBreaker:
          # -- These two variables indicate how many failures and capacity to tolerate before opening the circuit.
          failureThresholdCount: 30
          failureThresholdCapacity: 100
          # -- How long to wait before trying to re-enable the upstream after circuit breaker was opened.
          halfOpenAfter: 120s
          # -- These two variables indicate how many successes are required in half-open state before closing the circuit, and putting the upstream back in available upstreams.
          successThresholdCount: 8
          successThresholdCapacity: 10        # On network-level retry policy applies to the incoming request to eRPC,
        # -- this is additional to the retry policy set on upstream level.
        retry:
          # -- Total retries besides the initial request:
          maxCount: 3
          # -- Min delay between retries:
          delay: 500ms
          # -- Maximum delay between retries:
          backoffMaxDelay: 10s
          # -- Multiplier for each retry for exponential backoff:
          backoffFactor: 0.3
          # -- Random jitter to avoid thundering herd, e.g. add between 0 to 500ms to each retry delay:
          jitter: 500ms

      # -- A upstream is defined to handle 1 or more networks (a.k.a. chains). ref: https://docs.erpc.cloud/config/projects/upstreams
      upstreams:
        - id: eth-public-blast
          chainId: 1
          endpoint: https://eth-mainnet.public.blastapi.io
          rateLimitBudget: freemium
        - id: sep-public-node
          chainId: 11155111
          endpoint: https://ethereum-sepolia-rpc.publicnode.com
          # -- [optional] - additional failsafe settings for this upstream
          failsafe:
            timeout:
              duration: 15s
            retry:
              maxCount: 2
              delay: 1000ms
              backoffMaxDelay: 10s
              backoffFactor: 0.3
              jitter: 500ms
          rateLimitBudget: freemium
          rateLimitAutoTune:
            enabled: true
            adjustmentPeriod: 1m
            errorRateThreshold: 0.1
            increaseFactor: 1.05
            decreaseFactor: 0.9
            minBudget: 0
            maxBudget: 10_000
          jsonRpc:
            supportsBatch: true
            batchMaxSize: 100
            batchMaxWait: 100ms
          # Which methods must never be sent to this upstream.
          # For example this can be used to avoid archive calls (traces) to full nodes
          ignoreMethods:
            - "alchemy_*"
          # -- Explicitly allowed methods will take precedence over ignoreMethods.
          # For example if you only want eth_getLogs to be served, set ignore methods to "*" and allowMethods to "eth_getLogs".
          allowMethods:
            - "eth_getLogs"
          # By default a dynamic mechanism automatically adds "Unsupported" methods to ignoreMethods,
          # based on errors returned by the upstream. Set this to false to disable this behavior.
          autoIgnoreUnsupportedMethods: true
        # - id: blastapi
        #   endpoint: blastapi://${BLAST_API_KEY}
        # - id: drpc
        #   endpoint: drpc://${DRPC_API_KEY}

        # -- Ref: https://docs.erpc.cloud/config/projects/upstreams#envio-json-rpc
        # - id: envio-public
        #   endpoint: envio://rpc.hypersync.xyz
        #   rateLimit: p2


  # -- Define rate limiters for upstreams. ref: https://docs.erpc.cloud/config/projects/rate-limiters
  rateLimiters:
    - id: freemium
      rules:
        - method: '*'
          maxCount: 100
          period: 1s
    - id: premium
      rules:
        - method: '*'
          maxCount: 1000
          period: 2s


# -- If true, create a ServiceMonitor CRD for prometheus operator
serviceMonitor:
  # -- If true, a ServiceMonitor CRD is created for a prometheus operator
  # https://github.com/coreos/prometheus-operator
  enabled: false
  # -- port to scrape
  port: metrics
  # -- Path to scrape
  path: /metrics
  # -- Alternative namespace for ServiceMonitor
  namespace: null
  # -- Additional ServiceMonitor labels
  labels: {}
  # -- Additional ServiceMonitor annotations
  annotations: {}
  # -- ServiceMonitor scrape interval
  interval: 1m
  # -- ServiceMonitor scheme
  scheme: http
  # -- ServiceMonitor TLS configuration
  tlsConfig: {}
  # -- ServiceMonitor scrape timeout
  scrapeTimeout: 30s
  # -- ServiceMonitor relabelings
  relabelings: []

extraObjects: []
