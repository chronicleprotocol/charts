# Default values for erpc.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# -- Deployment replica count
replicaCount: 1

## OR
# -- Enable autoscaling / HPA
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

# -- The duration in seconds the pod needs to terminate gracefully.
# This should be greater than the sum of erpc.server.waitBeforeShutdown and erpc.server.waitAfterShutdown
# to allow the application to shut down cleanly.
terminationGracePeriodSeconds: 70

# -- default RollingUpdate
updateStrategy: null
# -- default is 0
maxUnavailable: null
# -- default is 1
maxSurge: null

image:
  repository: ghcr.io/erpc/erpc
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}
  # configmap.reloader.stakater.com/reload: "erpc-config"
podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  annotations: {}
  labels: {}
  ports:
    http:
      port: 4000
      protocol: TCP
    metrics:
      port: 4001
      protocol: TCP

ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

# -- Liveness probe
# @default -- See `values.yaml`
livenessProbe:
  httpGet:
    path: /
    port: http
  # initialDelaySeconds is not needed when using a startupProbe
  periodSeconds: 15
  timeoutSeconds: 2
  failureThreshold: 3

# -- Readiness probe
# @default -- See `values.yaml`
readinessProbe:
  httpGet:
    path: /
    port: http
  initialDelaySeconds: 5
  periodSeconds: 10
  timeoutSeconds: 2
  failureThreshold: 3

# -- Startup probe. Once this succeeds, the liveness probe takes over.
# @default -- See `values.yaml`
startupProbe:
  httpGet:
    path: /
    port: http
  # Allow up to 5 minutes (30 * 10s) for the application to start
  failureThreshold: 30
  periodSeconds: 10
  timeoutSeconds: 2
nodeSelector: {}

tolerations: []

affinity: {}

# -- create env vars from secrets, eg RPC provider API keys (eg, Blast API, DRPC, Infura, Alchemy, etc. )
env: {}
  # - name: ROUTING_POLICY_MAX_ERROR_RATE
  #   value: "0.7"
  # - name: ROUTING_POLICY_MAX_BLOCK_HEAD_LAG
  #   value: "10"
  # - name: ROUTING_POLICY_MIN_HEALTHY_THRESHOLD
  #   value: "1"
  # - name: DRPC_API_KEY
  #   valueFrom:
  #     secretKeyRef:
  #       name: rpc-api-keys
  #       key: drpc-api
  # - name: BLAST_API_KEY
  #   valueFrom:
  #     secretKeyRef:
  #       name: rpc-api-keys
  #       key: blast-api
  # - name: INFURA_API_KEY
  #   valueFrom:
  #     secretKeyRef:
  #       name: infura-api-key
  #       key: INFURA_API_KEY

# -- eRPC configuration, ref: https://docs.erpc.cloud/config/example#full-config-example; accepts full erpc.yaml config
erpc:
  logLevel: warn

  # The main server for eRPC to listen for requests.
  server:
    listenV4: true
    httpHostV4: "0.0.0.0"
    listenV6: false
    httpHostV6: "[::]"
    httpPort: 4000
    maxTimeout: 30s
    readTimeout: 10s
    writeTimeout: 20s
    enableGzip: true
    waitBeforeShutdown: 30s
    waitAfterShutdown: 30s
    tls:
      enabled: false
      certFile: "/path/to/cert.pem"
      keyFile: "/path/to/key.pem"
      caFile: "/path/to/ca.pem"  # Optional, for client cert verification
      insecureSkipVerify: false  # Optional, defaults to false

  # Optional Prometheus metrics server
  metrics:
    enabled: true
    listenV4: true
    hostV4: "0.0.0.0"
    listenV6: false
    hostV6: "[::]"
    port: 4001

  # There are various use-cases of database in erpc, such as caching, dynamic configs, rate limit persistence, etc.
  database:
    # `evmJsonRpcCache` defines the destination for caching JSON-RPC cals towards any EVM architecture upstream.
    # This database is non-blocking on critical path, and is used as best-effort.
    # Make sure the storage requirements meet your usage, for example caching 70m blocks + 10m txs + 10m traces on Arbitrum needs 200GB of storage.
    evmJsonRpcCache:
      # Refer to "Database" section for more details.
      # Note that table, schema and indexes will be created automatically if they don't exist.
      connectors:
        - id: memory-cache
          driver: memory
          memory:
            maxItems: 100000
        # - id: postgres-cache
        #   driver: postgresql
        #   postgresql:
        #     connectionUri: >-
        #       postgres://YOUR_USERNAME_HERE:YOUR_PASSWORD_HERE@your.postgres.hostname.here.com:5432/your_database_name
        #     table: rpc_cache
      policies:
        - network: "*"
          method: "*"
          finality: finalized
          connector: memory-cache
          ttl: 0
        - network: "*"
          method: "*"
          finality: unfinalized
          connector: memory-cache
          maxItemSize: 1MB
          ttl: 5s
        - network: "*"
          method: "*"
          finality: unknown
          connector: memory-cache
          ttl: 5s

  # Each project is a collection of networks and upstreams.
  # For example "backend", "indexer", "frontend", and you want to use only 1 project you can name it "main"
  # The main purpose of multiple projects is different failsafe policies (more aggressive and costly, or less costly and more error-prone)
  projects:
    - id: main

      # Optionally you can define a self-imposed rate limite budget for each project
      # This is useful if you want to limit the number of requests per second or daily allowance.
      rateLimitBudget: frontend-budget

      # This array configures network-specific (a.k.a chain-specific) features.
      # For each network "architecture" and corresponding network id (e.g. evm.chainId) is required.
      # Remember defining networks is OPTIONAL, so only provide these only if you want to override defaults.
      networks:
        - architecture: evm
          evm:
            chainId: 1
          # Refer to "Failsafe" section for more details.
          # On network-level "timeout" is applied for the whole lifecycle of the request (including however many retries)
          failsafe:
          - matchMethod: "*"    # Default policy for all methods
            timeout:
              duration: 30s
            retry:
              maxAttempts: 3
              delay: 0ms
            # Defining a "hedge" is highly-recommended on network-level because if upstream A is being slow for
            # a specific request, it can start a new parallel hedged request to upstream B, for whichever responds faster.
            hedge:
              delay: 500ms
              maxCount: 1
            circuitBreaker:
              failureThresholdCount: 160
              failureThresholdCapacity: 200
              halfOpenAfter: 5m
              successThresholdCount: 3
              successThresholdCapacity: 3
        - architecture: evm
          evm:
            chainId: 42161
          failsafe:
          - matchMethod: "*"
            timeout:
              duration: 30s
            retry:
              maxAttempts: 3
              delay: 0ms
            hedge:
              delay: 500ms
              maxCount: 1

      # Each upstream supports 1 or more networks (chains)
      upstreams:
        - id: blastapi-chain-42161
          type: evm
          endpoint: https://arbitrum-one.blastapi.io/xxxxxxx-xxxxxx-xxxxxxx
          # Defines which budget to use when hadnling requests of this upstream.
          rateLimitBudget: global-blast
          # chainId is optional and will be detected from the endpoint (eth_chainId) but it is recommended to set it explicitly, for faster initialization.
          evm:
            chainId: 42161
          # Which methods must never be sent to this upstream:
          ignoreMethods:
            - "alchemy_*"
            - "eth_traceTransaction"
          # Refer to "Failsafe" section for more details:
          failsafe:
          - matchMethod: "*"    # Default policy for all methods
            timeout:
              duration: 15s
            retry:
              maxAttempts: 2
              delay: 500ms
              backoffMaxDelay: 3s
              backoffFactor: 1.2
              jitter: 0ms
        - id: blastapi-chain-1
          type: evm
          endpoint: https://eth-mainnet.blastapi.io/xxxxxxx-xxxxxx-xxxxxxx
          rateLimitBudget: global-blast
          evm:
            chainId: 1
          failsafe:
          - matchMethod: "*"
            timeout:
              duration: 15s
            retry:
              maxAttempts: 2
              delay: 500ms
              backoffMaxDelay: 3s
              backoffFactor: 1.2
              jitter: 0ms
        - id: quiknode-chain-42161
          type: evm
          endpoint: https://xxxxxx-xxxxxx.arbitrum-mainnet.quiknode.pro/xxxxxxxxxxxxxxxxxxxxxxxx/
          rateLimitBudget: global-quicknode
          # You can enable auto-ignoring unsupported methods, instead of defining them explicitly.
          # NOTE: some providers (e.g. dRPC) are not consistent with "unsupported method" responses,
          # so this feature might mark methods as unsupported that are actually supported!
          autoIgnoreUnsupportedMethods: true
          # To allow auto-batching requests towards the upstream, use these settings.
          # Remember if "supportsBatch" is false, you still can send batch requests to eRPC
          # but they will be sent to upstream as individual requests.
          jsonRpc:
            supportsBatch: true
            batchMaxSize: 10
            batchMaxWait: 100ms
          evm:
            chainId: 42161
          failsafe:
          - matchMethod: "*"
            timeout:
              duration: 15s
            retry:
              maxAttempts: 2
              delay: 500ms
              backoffMaxDelay: 3s
              backoffFactor: 1.2
              jitter: 0ms

          # "id" is a unique identifier to distinguish in logs and metrics.
        - id: alchemy-multi-chain-example
          # For certain known providers (such as Alchemy) you use a custom protocol name
          # which allows a single upstream to import "all chains" supported by that provider.
          # Note that these chains are hard-coded in the repo, so if they support a new chain eRPC must be updated.
          endpoint: alchemy://XXXX_YOUR_ALCHEMY_API_KEY_HERE_XXXX
          rateLimitBudget: global
          failsafe:
          - matchMethod: "*"
            timeout:
              duration: 15s
            retry:
              maxAttempts: 2
              delay: 500ms
              backoffMaxDelay: 3s
              backoffFactor: 1.2
              jitter: 0ms

  # Rate limiter allows you to create "shared" budgets for upstreams.
  # For example upstream A and B can use the same budget, which means both of them together must not exceed the defined limits.
  rateLimiters:
    budgets:
      - id: global
        rules:
          - method: "*"
            maxCount: 20000
            period: 1s
            waitTime: 1s
      - id: default-budget
        rules:
          - method: "*"
            maxCount: 10000
            period: 1s
            waitTime: 100ms
      - id: global-blast
        rules:
          - method: "*"
            maxCount: 1000
            period: 1s
      - id: global-quicknode
        rules:
          - method: "*"
            maxCount: 300
            period: 1s
      - id: frontend-budget
        rules:
          - method: "*"
            maxCount: 500
            period: 1s


# -- If true, create a ServiceMonitor CRD for prometheus operator
serviceMonitor:
  # -- If true, a ServiceMonitor CRD is created for a prometheus operator
  # https://github.com/coreos/prometheus-operator
  enabled: false
  # -- port to scrape
  port: metrics
  # -- Path to scrape
  path: /metrics
  # -- Alternative namespace for ServiceMonitor
  namespace: null
  # -- Additional ServiceMonitor labels
  labels: {}
  # -- Additional ServiceMonitor annotations
  annotations: {}
  # -- ServiceMonitor scrape interval
  interval: 1m
  # -- ServiceMonitor scheme
  scheme: http
  # -- ServiceMonitor TLS configuration
  tlsConfig: {}
  # -- ServiceMonitor scrape timeout
  scrapeTimeout: 30s
  # -- ServiceMonitor relabelings
  relabelings: []

extraObjects: []
