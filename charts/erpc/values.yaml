# Default values for erpc.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# -- Deployment replica count
replicaCount: 1

## OR
# -- Enable autoscaling / HPA
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

# -- default is 20 seconds
preStopSleepSeconds: null
# -- default RollingUpdate
updateStrategy: null
# -- default is 0
maxUnavailable: null
# -- default is 1
maxSurge: null

image:
  repository: ghcr.io/erpc/erpc
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}
  # configmap.reloader.stakater.com/reload: "erpc-config"
podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  annotations: {}
  labels: {}
  ports:
    http:
      port: 4000
      protocol: TCP
    metrics:
      port: 4001
      protocol: TCP

ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

# -- Liveness probe
# @default -- See `values.yaml`
livenessProbe:
  tcpSocket:
    port: http
  initialDelaySeconds: 60
  periodSeconds: 30

# -- Readiness probe
# @default -- See `values.yaml`
readinessProbe:
  tcpSocket:
    port: http
  initialDelaySeconds: 10
  periodSeconds: 10

nodeSelector: {}

tolerations: []

affinity: {}

redis:
  # -- If enabled a redis chart will be deployed as a dependency
  enabled: false
  auth:
    password: yourRedisSecret
  master:
    persistence:
      enabled: false
      size: 8Gi
  replica:
    replicaCount: 1
    persistence:
      enabled: false
      size: 8Gi

# -- create env vars from secrets, eg RPC provider API keys (eg, Blast API, DRPC, Infura, Alchemy, etc. )
env: {}
  # - name: ROUTING_POLICY_MAX_ERROR_RATE
  #   value: "0.7"
  # - name: ROUTING_POLICY_MAX_BLOCK_HEAD_LAG
  #   value: "10"
  # - name: ROUTING_POLICY_MIN_HEALTHY_THRESHOLD
  #   value: "1"
  # - name: DRPC_API_KEY
  #   valueFrom:
  #     secretKeyRef:
  #       name: rpc-api-keys
  #       key: drpc-api
  # - name: BLAST_API_KEY
  #   valueFrom:
  #     secretKeyRef:
  #       name: rpc-api-keys
  #       key: blast-api
  # - name: INFURA_API_KEY
  #   valueFrom:
  #     secretKeyRef:
  #       name: infura-api-key
  #       key: INFURA_API_KEY

erpc:
  server:
    listenV4: true
    httpHostV4: "0.0.0.0"
    listenV6: false
    httpHostV6: "[::]"
    httpPort: 4000
    maxTimeout: 30s
    readTimeout: 10s
    writeTimeout: 20s
    enableGzip: true

  metrics: true
  # -- Log level for eRPC. Must be one of `debug`, `info`, `warn`, `error`, `fatal`, or `panic`.
  logLevel: info
  # -- provides a DB backend for caching. must be one of `memory`, `redis`, or `postgresql`. ref: https://docs.erpc.cloud/config/database/drivers
  cacheConfig:
    # -- can provide multiple connectors
    connectors:
      - id: memory-cache
        driver: memory
        memory:
          maxItems: 100000
    # -- can provide multiple policies to work with all connectors configured
    policies:
      # Example: Cache all methods with finalized data including empty responses
      - network: "*"
        method: "*"
        finality: finalized
        empty: allow
        connector: memory-cache
        ttl: 0
      # Example: Cache unfinalized data only for 5 seconds (getLogs of a recent block) except empty responses
      - network: "*"
        method: "*"
        finality: unfinalized
        empty: ignore
        connector: memory-cache
        ttl: 5s
      # Example: Cache unknown finalization data (eth_trace*) only for 10 seconds
      - network: "*"
        method: "*"
        finality: unknown
        empty: ignore
        connector: memory-cache
        ttl: 10s
      # Example: Cache realtime data only for 2 seconds (eth_blockNumber, eth_gasPrice, etc) to reduce costs yet fresh enough data
      - network: "*"
        method: "*"
        finality: realtime
        empty: ignore
        connector: memory-cache
        ttl: 2s
        driver: memory

  # -- Projects define the networks and chains that eRPC will proxy for. ref: https://docs.erpc.cloud/config/projects
  projects:

    # -- each project must have a unique id, and is used in the URL structure: fqdn/{project_id}/{network-architecture}/{chain-id}
    - id: main
      # -- A network represents a chain in EVM, and it is a local grouping for upstreams. ref: https://docs.erpc.cloud/config/projects/networks
      networkIds:
      - '1'  # -- Eth mainnet
      - '11155111'  # -- Sepolia
      # todo: apply network level configuration per networkId
      # -- Apply auth to project level. ref: https://docs.erpc.cloud/config/auth
      authStrategies: {}
        # - type: secret
        #   rateLimitBudget: freemium
        #   secret:
        #     value: "some-random-secret-value"
        # - type: secret
        #   rateLimitBudget: premium
        #   secret:
        #     value: "some-random-secret2-value"
      networkFailsafe: {}
      upstreamDefaults:
        # -- Default group for all upstreams
        group: "default"

        # -- Default JSON-RPC settings
        jsonRpc:
          supportsBatch: true
          batchMaxSize: 10
          batchMaxWait: "50ms"

        # -- Default failsafe policies
        failsafe:
          timeout:
            duration: "15s"
          retry:
            maxAttempts: 3
            delay: "300ms"
            jitter: "100ms"
            backoffMaxDelay: "5s"
            backoffFactor: 1.5
          circuitBreaker:
            failureThresholdCount: 160
            failureThresholdCapacity: 200
            halfOpenAfter: "5m"
            successThresholdCount: 3
            successThresholdCapacity: 3

        # Default method filters
        ignoreMethods:
          - "eth_traceTransaction"
          - "alchemy_*"
        allowMethods:
          - "eth_getLogs"
      # -- A upstream is defined to handle 1 or more networks (a.k.a. chains). ref: https://docs.erpc.cloud/config/projects/upstreams
      upstreams:
        - id: eth-public-blast
          chainId: 1
          endpoint: https://eth-mainnet.public.blastapi.io
          group: fallback
          rateLimitBudget: freemium
          # -- (OPTIONAL) statePollerInterval used to periodically fetch the latest/finalized/sync states.
          # To disable state polling set this value to 0, which means no regular calls to RPC for latest/finalized/sync states.
          # The consequence of this is all data will be considered "unfinalized" or "unknown" despite their block numbers (and where if theye're actually finalized or not).
          # DEFAULT: 30s.
          statePollerInterval: 30s
          # -- (OPTIONAL) nodeType is optional and you can manually set it to "full" or "archive".
          # -- DEFAULT: archive
          nodeType: full
          # (OPTIONAL) maxAvailableRecentBlocks limits the maximum number of recent blocks to be served by this upstream.
          # -- DEFAULT: 128 (for "full" nodes).
          maxAvailableRecentBlocks: 128


        - id: sep-public-node
          chainId: '11155111'
          endpoint: https://ethereum-sepolia-rpc.publicnode.com
          # -- [optional] - additional failsafe settings for this upstream
          failsafe:
            timeout:
              duration: 15s
            retry:
              maxCount: 2
              delay: 1000ms
              backoffMaxDelay: 10s
              backoffFactor: 0.3
              jitter: 500ms
          rateLimitBudget: freemium
          rateLimitAutoTune:
            enabled: true
            adjustmentPeriod: 1m
            errorRateThreshold: 0.1
            increaseFactor: 1.05
            decreaseFactor: 0.9
            minBudget: 0
            maxBudget: 10_000
          jsonRpc:
            supportsBatch: true
            batchMaxSize: 100
            batchMaxWait: 100ms
          # Which methods must never be sent to this upstream.
          # For example this can be used to avoid archive calls (traces) to full nodes
          ignoreMethods:
            - "alchemy_*"
          # -- Explicitly allowed methods will take precedence over ignoreMethods.
          # For example if you only want eth_getLogs to be served, set ignore methods to "*" and allowMethods to "eth_getLogs".
          allowMethods:
            - "eth_getLogs"
          # By default a dynamic mechanism automatically adds "Unsupported" methods to ignoreMethods,
          # based on errors returned by the upstream. Set this to false to disable this behavior.
          autoIgnoreUnsupportedMethods: true
          # Determines when to include or exclude upstreams depending on their health and performance
          selectionPolicy:
            # Every 1 minute evaluate which upstreams must be included,
            # based on the arbitrary logic (e.g., <90% error rate and <10 block lag):
            evalInterval: 1m

            # Freeform TypeScript-based logic to select upstreams to be included by returning them:
            evalFunction: |
              (upstreams, method) => {

                const defaults = upstreams.filter(u => u.config.group !== 'fallback')
                const fallbacks = upstreams.filter(u => u.config.group === 'fallback')

                // Maximum allowed error rate.
                const maxErrorRate = parseFloat(process.env.ROUTING_POLICY_MAX_ERROR_RATE || '0.7')

                // Maximum allowed block head lag.
                const maxBlockHeadLag = parseFloat(process.env.ROUTING_POLICY_MAX_BLOCK_HEAD_LAG || '10')

                // Minimum number of healthy upstreams that must be included in default group.
                const minHealthyThreshold = parseInt(process.env.ROUTING_POLICY_MIN_HEALTHY_THRESHOLD || '1')

                // Filter upstreams that are healthy based on error rate and block head lag.
                const healthyOnes = defaults.filter(
                  u => u.metrics.errorRate < maxErrorRate && u.metrics.blockHeadLag < maxBlockHeadLag
                )

                // If there are enough healthy upstreams, return them.
                if (healthyOnes.length >= minHealthyThreshold) {
                  return healthyOnes
                }

                // The reason all upstreams are returned is to be less harsh and still consider default nodes (in case they have intermittent issues)
                // Order of upstreams does not matter as that will be decided by the upstream scoring mechanism
                return upstreams
              }

            # To isolate selection evaluation and result to each "method" separately change this flag to true
            evalPerMethod: false

            # When an upstream is excluded, you can give it a chance on a regular basis
            # to handle a certain number of sample requests again, so that metrics are refreshed.
            # For example, to see if error rate is improving after 5 minutes, or still too high.
            # This is conceptually similar to how a circuit-breaker works in a "half-open" state.
            # Resampling is not always needed because the "evm state poller" component will still make
            # requests for the "latest" block, which still updates errorRate.
            resampleExcluded: false
            resampleInterval: 5m
            resampleCount: 100


  # -- Define rate limiters for upstreams. ref: https://docs.erpc.cloud/config/projects/rate-limiters
  rateLimiters:
    - id: freemium
      rules:
        - method: '*'
          maxCount: 100
          period: 1s
    - id: premium
      rules:
        - method: '*'
          maxCount: 1000
          period: 2s


# -- If true, create a ServiceMonitor CRD for prometheus operator
serviceMonitor:
  # -- If true, a ServiceMonitor CRD is created for a prometheus operator
  # https://github.com/coreos/prometheus-operator
  enabled: false
  # -- port to scrape
  port: metrics
  # -- Path to scrape
  path: /metrics
  # -- Alternative namespace for ServiceMonitor
  namespace: null
  # -- Additional ServiceMonitor labels
  labels: {}
  # -- Additional ServiceMonitor annotations
  annotations: {}
  # -- ServiceMonitor scrape interval
  interval: 1m
  # -- ServiceMonitor scheme
  scheme: http
  # -- ServiceMonitor TLS configuration
  tlsConfig: {}
  # -- ServiceMonitor scrape timeout
  scrapeTimeout: 30s
  # -- ServiceMonitor relabelings
  relabelings: []

extraObjects: []
